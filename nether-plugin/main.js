/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var u=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var g=Object.prototype.hasOwnProperty;var m=(o,i)=>{for(var t in i)u(o,t,{get:i[t],enumerable:!0})},y=(o,i,t,e)=>{if(i&&typeof i=="object"||typeof i=="function")for(let s of d(i))!g.call(o,s)&&s!==t&&u(o,s,{get:()=>i[s],enumerable:!(e=c(i,s))||e.enumerable});return o};var v=o=>y(u({},"__esModule",{value:!0}),o);var S={};m(S,{default:()=>r});module.exports=v(S);var a=require("obsidian"),w={serverUrl:"",apiKey:"",vaultName:"",lastSyncedAt:0},r=class extends a.Plugin{constructor(){super(...arguments);this.uploadTimeouts=new Map}async onload(){console.log("Loading NetherPlugin (auto-sync)..."),await this.loadSettings(),this.addSettingTab(new p(this.app,this)),this.registerEvent(this.app.vault.on("modify",t=>{t instanceof a.TFile&&t.extension==="md"&&this.scheduleUpload(t)})),this.registerInterval(window.setInterval(()=>this.pullUpdates(),1e4))}onunload(){console.log("Unloading NetherPlugin...")}async loadSettings(){let t=await this.loadData();this.settings=Object.assign({},w,t)}async saveSettings(){await this.saveData(this.settings)}scheduleUpload(t){let e=t.path;this.uploadTimeouts.has(e)&&window.clearTimeout(this.uploadTimeouts.get(e));let s=window.setTimeout(()=>{this.uploadFile(t),this.uploadTimeouts.delete(e)},1e4);this.uploadTimeouts.set(e,s)}async uploadFile(t){try{let e=await this.app.vault.read(t),s=Date.now(),l=await fetch(`${this.settings.serverUrl}/upload`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:this.settings.apiKey},body:JSON.stringify({vault:this.settings.vaultName,title:t.basename,content:e,timestamp:s})});if(!l.ok)throw new Error(`Server returned status ${l.status}`);s>this.settings.lastSyncedAt&&(this.settings.lastSyncedAt=s,await this.saveSettings()),console.log(`Auto-synced: ${t.basename} at ${s}`)}catch(e){console.error("Auto-sync upload failed:",e)}}async pullUpdates(){try{let t=`${this.settings.serverUrl}/pull?vault=${encodeURIComponent(this.settings.vaultName)}&since=${this.settings.lastSyncedAt}`,e=await fetch(t,{method:"GET",headers:{Authorization:this.settings.apiKey}});if(!e.ok)throw new Error(`Server returned status ${e.status}`);let s=await e.json();if(!s||!Array.isArray(s.updates))throw new Error('Response JSON missing "updates" array.');let l=this.settings.lastSyncedAt;for(let n of s.updates){if(!n.title||!n.content||!n.timestamp)continue;let h=this.app.vault.getAbstractFileByPath(n.title+".md");h instanceof a.TFile?await this.app.vault.modify(h,n.content):await this.app.vault.create(n.title+".md",n.content),n.timestamp>l&&(l=n.timestamp),console.log(`Pulled and updated: ${n.title} (ts=${n.timestamp})`)}l>this.settings.lastSyncedAt&&(this.settings.lastSyncedAt=l,await this.saveSettings())}catch(t){console.error("Failed to pull updates:",t)}}},p=class extends a.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"Nether Plugin Settings"}),new a.Setting(t).setName("Urbit URL").setDesc("The URL of your Urbit Nether app (e.g., /apps/nether).").addText(e=>e.setPlaceholder("https://sampel-palnet.startram.io/apps/nether").setValue(this.plugin.settings.serverUrl).onChange(async s=>{this.plugin.settings.serverUrl=s})),new a.Setting(t).setName("Key").setDesc("Secret key from your Urbit app.").addText(e=>e.setPlaceholder("Your secret key").setValue(this.plugin.settings.apiKey).onChange(async s=>{this.plugin.settings.apiKey=s})),new a.Setting(t).setName("Vault Name").setDesc("A unique name for this vault on your Urbit server.").addText(e=>e.setPlaceholder("MyVaultName").setValue(this.plugin.settings.vaultName).onChange(async s=>{this.plugin.settings.vaultName=s})),new a.Setting(t).setName("Save Settings").setDesc("Apply your changes.").addButton(e=>{e.setButtonText("Save"),e.onClick(async()=>{await this.plugin.saveSettings(),new a.Notice("Nether plugin settings have been saved.")})})}};
